var documenterSearchIndex = {"docs":
[{"location":"quickguide/#Quick-Start-Guide","page":"Getting Started","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Once PowerModelsAnalytics.jl is installed, Plots.jl is installed, and a Plots.jl backend is installed (we will use Plotly, which is included in Plots.jl, for this guide), and a network data file (e.g. case5.m\" in the PowerModels.jl package folder under ./test/data/matpower) has been acquired, the network can be plotted with,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"using PowerModels, PowerModelsAnalytics\nusing Plots\nplotly()\n\ndata = PowerModels.parse_file(\"$(joinpath(dirname(pathof(PowerModels)), \"..\"))/test/data/matpower/case5.m\")\nplot_network(data)","category":"page"},{"location":"quickguide/#IJulia-Example-Output","page":"Getting Started","title":"IJulia Example Output","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"using PowerModelsAnalytics\nimport PowerModels\nimport PowerModelsDistribution\nimport Ipopt\n\nPowerModels.silence()","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"ENV[\"GRDIR\"]=\"\"\nimport Plots\nPlots.gr()","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Plots.GRBackend()","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"case5 = PowerModels.parse_file(\"$(joinpath(dirname(pathof(PowerModels)), \"..\"))/test/data/matpower/case5.m\");\ncase24 = PowerModels.parse_file(\"$(joinpath(dirname(pathof(PowerModels)), \"..\"))/test/data/matpower/case24.m\");\ncase_distribution = PowerModelsDistribution.parse_file(\"$(joinpath(dirname(pathof(PowerModelsDistribution)), \"..\"))/test/data/opendss/test2_master.dss\");","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"graph = plot_network(case5;\n    node_size_limits=[10, 15],\n    edge_width_limits=[2, 3],\n    label_nodes=true,\n    fontsize=10,\n    plot_size=(600,600),\n    plot_dpi=100);","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"(Image: svg)","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"graph = plot_network(case24; aggregate_extra_nodes=true,\n    node_size_limits=[10, 15],\n    edge_width_limits=[2, 3],\n    label_nodes=true,\n    fontsize=10,\n    plot_size=(600,600),\n    plot_dpi=100);","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"(Image: svg)","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"graph = plot_network(case_distribution; aggregate_extra_nodes=true,\n    node_size_limits=[10, 15],\n    edge_width_limits=[2, 3],\n    label_nodes=true,\n    fontsize=10,\n    plot_size=(600,600),\n    plot_dpi=100);","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"(Image: svg)","category":"page"},{"location":"library/#PowerModelsAnalytics.jl-Library","page":"Functions","title":"PowerModelsAnalytics.jl Library","text":"","category":"section"},{"location":"library/","page":"Functions","title":"Functions","text":"Modules = [PowerModelsAnalytics]","category":"page"},{"location":"library/#PowerModelsAnalytics.default_block_connectors","page":"Functions","title":"PowerModelsAnalytics.default_block_connectors","text":"default edge type between blocks (PowerModels, PowerModelsDistribution\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_branch_impedance_spec","page":"Functions","title":"PowerModelsAnalytics.default_branch_impedance_spec","text":"Vega spec for branch impedance plot\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_colors","page":"Functions","title":"PowerModelsAnalytics.default_colors","text":"Default plot colors, including all supported component variations\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_demand_color_range","page":"Functions","title":"PowerModelsAnalytics.default_demand_color_range","text":"default color range for partially loaded buses\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_demands_eng","page":"Functions","title":"PowerModelsAnalytics.default_demands_eng","text":"default demands (loads) for eng model (PowerModelsDistribution)\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_demands_math","page":"Functions","title":"PowerModelsAnalytics.default_demands_math","text":"default demands (loads) for math model (PowerModels, PowerModelsDistribution)\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_edge_label_spec","page":"Functions","title":"PowerModelsAnalytics.default_edge_label_spec","text":"Vega spec for extension to network graph spec for labeling edges\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_edge_settings_eng","page":"Functions","title":"PowerModelsAnalytics.default_edge_settings_eng","text":"default edge types for eng data structure\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_edge_settings_math","page":"Functions","title":"PowerModelsAnalytics.default_edge_settings_math","text":"default edge types for math data structure (PowerModels, PowerModelsDistribution\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_edge_width_limits","page":"Functions","title":"PowerModelsAnalytics.default_edge_width_limits","text":"default upper and lower bound of the width of edges\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_extra_nodes_eng","page":"Functions","title":"PowerModelsAnalytics.default_extra_nodes_eng","text":"default node object to plot for eng data structure (PowerModelsDistribution)\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_extra_nodes_math","page":"Functions","title":"PowerModelsAnalytics.default_extra_nodes_math","text":"default node object to plot for math data structure (PowerModels, PowerModelsDistribution)\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_fontcolor","page":"Functions","title":"PowerModelsAnalytics.default_fontcolor","text":"default fontcolor\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_fontfamily","page":"Functions","title":"PowerModelsAnalytics.default_fontfamily","text":"default fontfamily\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_fontsize","page":"Functions","title":"PowerModelsAnalytics.default_fontsize","text":"default fontsize in pt\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_network_graph_spec","page":"Functions","title":"PowerModelsAnalytics.default_network_graph_spec","text":"Vega spec for network graph plot (base)\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_node_label_spec","page":"Functions","title":"PowerModelsAnalytics.default_node_label_spec","text":"Vega spec for extension to network graph spec for labeling nodes\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_node_settings_eng","page":"Functions","title":"PowerModelsAnalytics.default_node_settings_eng","text":"default node information for eng model (PowerModelsDistribution)\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_node_settings_math","page":"Functions","title":"PowerModelsAnalytics.default_node_settings_math","text":"default node information for math model (PowerModels, PowerModelsDistribution)\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_node_size_limits","page":"Functions","title":"PowerModelsAnalytics.default_node_size_limits","text":"default upper and lower bound of the size of nodes\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_plot_dpi","page":"Functions","title":"PowerModelsAnalytics.default_plot_dpi","text":"default dpi of plots\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_plot_size","page":"Functions","title":"PowerModelsAnalytics.default_plot_size","text":"default size of plots in pixels\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_source_demand_summary_spec","page":"Functions","title":"PowerModelsAnalytics.default_source_demand_summary_spec","text":"Vega spec for Source Demand Summary Plot\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_sources_eng","page":"Functions","title":"PowerModelsAnalytics.default_sources_eng","text":"default sources (generators) for the eng model (PowerModelsDistribution)\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_sources_math","page":"Functions","title":"PowerModelsAnalytics.default_sources_math","text":"default sources (generators) for the math model (PowerModels,PowerModelsDistribution)\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_spring_constant","page":"Functions","title":"PowerModelsAnalytics.default_spring_constant","text":"default spring constant for spring_layout\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.default_textalign","page":"Functions","title":"PowerModelsAnalytics.default_textalign","text":"default text alignemtn\n\n\n\n\n\n","category":"constant"},{"location":"library/#PowerModelsAnalytics.InfrastructureGraph","page":"Functions","title":"PowerModelsAnalytics.InfrastructureGraph","text":"InfrastructureGraph{T<:LightGraphs.AbstractGraph}\n\nA structure containing a graph of a PowerModels or PowerModelsDistribution network in the format of a LightGraphs.AbstractGraph and corresponding metadata necessary for analysis / plotting.\n\n\n\n\n\n","category":"type"},{"location":"library/#PowerModelsAnalytics.InfrastructureGraph-Tuple{Int64}","page":"Functions","title":"PowerModelsAnalytics.InfrastructureGraph","text":"InfrastructureGraph(nvertices)\n\nConstructor for the InfrastructureGraph struct, given a number of vertices nvertices\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics._cc_dfs-NTuple{4, Any}","page":"Functions","title":"PowerModelsAnalytics._cc_dfs","text":"DFS on a graph\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics._compute_mva_ub-Tuple{Dict{String, Any}, Any, Real}","page":"Functions","title":"PowerModelsAnalytics._compute_mva_ub","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics._convert_nan-Tuple{Any}","page":"Functions","title":"PowerModelsAnalytics._convert_nan","text":"converts nan values to 0.0\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics._parameter_check_branch-Tuple{Dict{String, Any}}","page":"Functions","title":"PowerModelsAnalytics._parameter_check_branch","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics._parameter_check_bus-Tuple{Dict{String, Any}}","page":"Functions","title":"PowerModelsAnalytics._parameter_check_bus","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics._parameter_check_gen-Tuple{Dict{String, Any}}","page":"Functions","title":"PowerModelsAnalytics._parameter_check_gen","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics._parameter_check_load-Tuple{Dict{String, Any}}","page":"Functions","title":"PowerModelsAnalytics._parameter_check_load","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics._parameter_check_network-Tuple{Dict{String, Any}}","page":"Functions","title":"PowerModelsAnalytics._parameter_check_network","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics._parameter_check_shunt-Tuple{Dict{String, Any}}","page":"Functions","title":"PowerModelsAnalytics._parameter_check_shunt","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.add_edge!-Union{Tuple{T}, Tuple{InfrastructureGraph{T}, Int64, Int64}} where T<:LightGraphs.AbstractGraph","page":"Functions","title":"PowerModelsAnalytics.add_edge!","text":"Adds an edge defined by i & j to graph\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.apply_plot_network_metadata!-Union{Tuple{InfrastructureGraph{T}}, Tuple{T}} where T<:LightGraphs.AbstractGraph","page":"Functions","title":"PowerModelsAnalytics.apply_plot_network_metadata!","text":"`apply_plot_network_metadata!(graph; kwargs...)`\n\nBuilds metadata properties, i.e. color/size of nodes/edges, for plotting based on graph metadata\n\nArguments:\n\n`graph::InfrastructureGraph`: Graph of power network\n`colors::Dict{String,<:Colors.Colorant}`: Dictionary of colors to be changed from `default_colors`\n`load_color_range::Vector{<:Colors.Colorant}`: Range of colors for load statuses\n`node_size_limitss::Vector{<:Real}`: Min/Max values for the size of nodes\n`edge_width_limits::Vector{<:Real}`: Min/Max values for the width of edges\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.build_network_graph-Tuple{Dict{String}}","page":"Functions","title":"PowerModelsAnalytics.build_network_graph","text":"`graph = build_power_network_graph(case::Dict{String,<:Any}; kwargs...)`\n\nBuilds a `InfrastructureGraph` from a power network `case`.\n\nArguments:\n\n`case::Dict{String,<:Any}`: Network case\n`edge_types::Vector{<:String}`: Component types that are edges\n`block_connector_types::Vector{<:String}`: Types of edges that connect blocks (only used when `block_graph==true`)\n`node_objects::Dict{String,<:Dict{String,<:String}}`: Other non-bus components to include in the graph\n`block_graph::Bool`: If `true`, return block graph\n`aggregate_node_objects::Bool`: If `true`, if multiple node objects present at a bus, aggregate into a single vertex\n`exclusions::Vector{Any}`: Pattern for exclusion from graph\n\nReturns:\n\n`graph`: InfrastructureGraph\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.calc_connected_components-Tuple{Dict{String}}","page":"Functions","title":"PowerModelsAnalytics.calc_connected_components","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.edges-Union{Tuple{InfrastructureGraph{T}}, Tuple{T}} where T<:LightGraphs.AbstractGraph","page":"Functions","title":"PowerModelsAnalytics.edges","text":"Returns an iterator of all the edges in graph\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.get_property-Union{Tuple{T}, Tuple{InfrastructureGraph{T}, Union{Int64, LightGraphs.AbstractEdge}, Symbol, Any}} where T<:LightGraphs.AbstractGraph","page":"Functions","title":"PowerModelsAnalytics.get_property","text":"Gets the property in the metadata of graph on obj at key. If property doesn't exist, returns default\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.hasprop-Union{Tuple{T}, Tuple{InfrastructureGraph{T}, Union{Int64, LightGraphs.AbstractEdge}, Symbol}} where T<:LightGraphs.AbstractGraph","page":"Functions","title":"PowerModelsAnalytics.hasprop","text":"Returns true if InfrastructureGraph graph has a property on an edge or a node obj\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.identify_blocks-Tuple{Dict{String}}","page":"Functions","title":"PowerModelsAnalytics.identify_blocks","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.is_active-Tuple{Dict{String}, Set}","page":"Functions","title":"PowerModelsAnalytics.is_active","text":"`ans = is_active`\n\nDetermines if block is \"active\", e.g. energized, based on criteria in `sources`\n\nArguements:\n\n`case::Dict{String,<:Any}`: Network case\n`block::Set{<:Any}`: block of node ids\n`sources::Dict{String,<:Dict{String,<:Any}}`: sources with settings that define criteria for active\n\nReturns:\n\n`ans::Bool`\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.kamada_kawai_layout-Union{Tuple{InfrastructureGraph{T}}, Tuple{T}} where T<:LightGraphs.AbstractGraph","page":"Functions","title":"PowerModelsAnalytics.kamada_kawai_layout","text":"NetworkX Kamada-Kawai layout function\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.layout_graph!-Union{Tuple{InfrastructureGraph{T}}, Tuple{T}, Tuple{InfrastructureGraph{T}, Function}} where T<:LightGraphs.AbstractGraph","page":"Functions","title":"PowerModelsAnalytics.layout_graph!","text":"`layout_graph!(graph::InfrastructureGraph, layout_engine::Function; kwargs...)`\n\nA routine to assign positions to all nodes of a `graph` for plotting using `layout_engine`.\nPositions are assigned to the metadata of each node at `:x` and `:y`.\n\nArguments:\n\n`graph::InfrastructureGraph`: Network graph\n`layout_engine`: Layout Function to use. Applies only when not using `use_coordinates`\n`use_coordinates::Bool`: If `true`, `spring_layout` will be used instead of `layout_engine`\n`apply_spring_layout::Bool`: If `true`, `spring_layout` will be applied after `layout_engine` to ensure separation of overlapping nodes\n`spring_constant::Real`: Spring constant to be used by `spring_layout`\n`kwargs`: Keyword arguments to be used in `layout_engine`\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.parameter_check_summary-Tuple{Dict{String, Any}}","page":"Functions","title":"PowerModelsAnalytics.parameter_check_summary","text":"\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.plot_branch_impedance-Tuple{Dict{String, Any}}","page":"Functions","title":"PowerModelsAnalytics.plot_branch_impedance","text":"Plots branch impedances\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.plot_graph-Union{Tuple{InfrastructureGraph{T}}, Tuple{T}} where T<:LightGraphs.AbstractGraph","page":"Functions","title":"PowerModelsAnalytics.plot_graph","text":"`spec = plot_graph(graph::InfrastructureGraph; kwargs...)`\n\nBuilds a figure sepcification. Returns `Vega.VGSpec`.\n\nArguments:\n\n`graph::InfrastructureGraph{<:LightGraphs.AbstractGraph}`: Network graph\n`label_nodes::Bool`: Plot labels on nodes\n`label_edges::Bool`: Plot labels on edges\n`fontsize::Real`: Fontsize of labels\n`fontfamily::String`: Font Family of labels\n`fontcolor::Union{Symbol,<:Colors.Colorant}`: Color of the labels\n`textalign::Symbol`: Alignment of text: \"left\", \"center\", \"right\"\n`plot_size::Tuple{Int,Int}`: Size of the plot in pixels\n`plot_dpi::Int`: Dots-per-inch of the plot\n\nReturns:\n\n`spec<:Vega.VGSpec`: Vega.jl figure specification\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.plot_load_summary-Tuple{String, Dict{String, Any}, Dict{String, Any}}","page":"Functions","title":"PowerModelsAnalytics.plot_load_summary","text":"`plot_load_summary(file, result, case; kwargs...)`\n\nPlots total generation, total load served, and total forecasted load for a given `case` and `result`, saving to `file`\n\nArguments:\n\n`file::String`: file path to saved figure\n`result::Dict{String,Any}`: multinetwork solution data (contains load statuses)\n`case::Dict{String,Any}`: Original case file (without calcuated loads) for forecasted loads\n`log::Bool`: If `true`, plots y-axis on log scale\n`intermediate::Bool`: If `true`, plots intermediate steps of plot (for animations).\n`legend_position::Symbol`: Position of legend, accepts the following symbols: `:right`, `:left`, `:top`, `:bottom`, `:inside`, `:best`, `:legend`, `:topright`, `:topleft`, `:bottomleft`, `:bottomright`\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.plot_network!-Tuple{Dict{String}}","page":"Functions","title":"PowerModelsAnalytics.plot_network!","text":"`graph = plot_network(case::Dict{String,<:Any}; kwargs...)`\n\nPlots a whole network `case` at the bus-level. Returns `InfrastructureGraph` and `Plots.AbstractPlot`.\nThis function will build the graph from the `case`. Additional `kwargs` are passed to\n`plot_network(graph; kwargs...)`.\n\nArguments:\n\n`case::Dict{String,Any}`: Network case data structure\n`positions::Union{Dict{Int,<:Any},InfrastructureGraph}`: Pre-set positions of graph vertices\n\nReturns:\n\n`fig`\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.plot_network!-Union{Tuple{InfrastructureGraph{T}}, Tuple{T}} where T<:LightGraphs.AbstractGraph","page":"Functions","title":"PowerModelsAnalytics.plot_network!","text":"`plot_network(graph; kwargs...)`\n\nPlots a network `graph`. Returns `InfrastructureGraph` and `Plots.AbstractPlot`.\n\nArguments:\n\n`graph::InfrastructureGraph{<:LightGraphs.AbstractGraph}`: Network graph\n`filename::String`: File to output the plot to, will use user-set Plots.jl backend\n`label_nodes::Bool`: Plot labels on nodes\n`label_edges::Bool`: Plot labels on edges\n`colors::Dict{String,<:Colors.Colorant}`: Changes to default colors, see `default_colors` for available components\n`load_color_range::Vector{<:Colors.Colorant}}`: Range of colors for load statuses\n`node_size_limits::Vector{<:Real}`: Min/Max values for the size of nodes\n`edge_width_limits::Vector{<:Real}`: Min/Max values for the width of edges\n`positions::Union{Dict{Int,<:Real}, InfrastructureGraph}`: Used to specify node locations of graph (avoids running layout algorithm every time)\n`use_coordinates::Bool`: Use buscoord field on buses for node positions\n`spring_constant::Real`: Only used if buscoords=true. Spring constant to be used to force-direct-layout buses with no buscoord field\n`apply_spring_layout::Bool`: Apply spring layout after initial layout\n`fontsize::Real`: Fontsize of labels\n`fontfamily::String`: Font Family of labels\n`fontcolor::Union{Symbol,<:Colors.Colorant}`: Color of the labels\n`textalign::Symbol`: Alignment of text\n`plot_size::Tuple{Int,Int}`: Size of the plot in pixels\n`plot_dpi::Int`: Dots-per-inch of the plot\n\nReturns:\n\n`fig`\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.plot_network-Tuple{Dict{String}}","page":"Functions","title":"PowerModelsAnalytics.plot_network","text":"`graph = plot_network(case::Dict{String,<:Any}; kwargs...)`\n\nPlots a whole network `case` at the bus-level. Returns `InfrastructureGraph` and `Plots.AbstractPlot`.\nThis function will build the graph from the `case`. Additional `kwargs` are passed to\n`plot_network(graph; kwargs...)`.\n\nArguments:\n\n`case::Dict{String,Any}`: Network case data structure\n`positions::Union{Dict{Int,<:Any},InfrastructureGraph}`: Pre-set positions of graph vertices\n\nReturns:\n\n`graph::InfrastructureGraph`: InfrastructureGraph of the network\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.plot_network-Union{Tuple{InfrastructureGraph{T}}, Tuple{T}} where T<:LightGraphs.AbstractGraph","page":"Functions","title":"PowerModelsAnalytics.plot_network","text":"`plot_network(graph; kwargs...)`\n\nPlots a network `graph`. Returns `InfrastructureGraph` and `Plots.AbstractPlot`.\n\nArguments:\n\n`graph::InfrastructureGraph{<:LightGraphs.AbstractGraph}`: Network graph\n`filename::String`: File to output the plot to, will use user-set Plots.jl backend\n`label_nodes::Bool`: Plot labels on nodes\n`label_edges::Bool`: Plot labels on edges\n`colors::Dict{String,<:Colors.Colorant}`: Changes to default colors, see `default_colors` for available components\n`load_color_range::Vector{<:Colors.Colorant}}`: Range of colors for load statuses\n`node_size_limits::Vector{<:Real}`: Min/Max values for the size of nodes\n`edge_width_limits::Vector{<:Real}`: Min/Max values for the width of edges\n`positions::Union{Dict{Int,<:Real}, InfrastructureGraph}`: Used to specify node locations of graph (avoids running layout algorithm every time)\n`use_coordinates::Bool`: Use buscoord field on buses for node positions\n`spring_constant::Real`: Only used if buscoords=true. Spring constant to be used to force-direct-layout buses with no buscoord field\n`apply_spring_layout::Bool`: Apply spring layout after initial layout\n`fontsize::Real`: Fontsize of labels\n`fontfamily::String`: Font Family of labels\n`fontcolor::Union{Symbol,<:Colors.Colorant}`: Color of the labels\n`textalign::Symbol`: Alignment of text\n`plot_size::Tuple{Int,Int}`: Size of the plot in pixels\n`plot_dpi::Int`: Dots-per-inch of the plot\n\nReturns:\n\n`graph::InfrastructureGraph`: InfrastructureGraph of the network\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.plot_source_demand_summary-Tuple{String, Dict{String}}","page":"Functions","title":"PowerModelsAnalytics.plot_source_demand_summary","text":"`plot_source_demand_summary(file::String, mn_case::Dict{String,<:Any}; kwargs...)`\n\nPlots the total delivery from sources (generation) and total receipts by demands (load)\n\nArguments:\n\n`fileout::String`: path to file where plot will be saved\n`mn_case::Dict{String,<:Any}`: a multinetwork case\n`yscale::Symbol`: To set log scale, `:log10`, else `:identity`\n`save_intermediate_frames::Bool`: if `true`, each frame of the multinetwork will be saved separately\n`legend_position::Symbol`: Position of legend, accepts the following symbols: `:right`, `:left`, `:top`, `:bottom`, `:inside`, `:best`, `:legend`, `:topright`, `:topleft`, `:bottomleft`, `:bottomright`\n`sources::Dict{String,<:Any}`: information about sources (e.g. generators)\n`demands::Dict{String,<:Any}`: information about demands (e.g. loads)\n`totals::Symbol`: Choose `:real`, `:imaginary`, `:complex`\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.properties-Union{Tuple{T}, Tuple{InfrastructureGraph{T}, Union{Int64, LightGraphs.AbstractEdge}}} where T<:LightGraphs.AbstractGraph","page":"Functions","title":"PowerModelsAnalytics.properties","text":"Returns all of the metadata for obj in graph\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.set_properties!-Union{Tuple{T}, Tuple{InfrastructureGraph{T}, Union{Int64, LightGraphs.AbstractEdge}, Dict{Symbol}}} where T<:LightGraphs.AbstractGraph","page":"Functions","title":"PowerModelsAnalytics.set_properties!","text":"Sets multiple properties in the metadata of graph on obj at key\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.set_property!-Union{Tuple{T}, Tuple{InfrastructureGraph{T}, Union{Int64, LightGraphs.AbstractEdge}, Symbol, Any}} where T<:LightGraphs.AbstractGraph","page":"Functions","title":"PowerModelsAnalytics.set_property!","text":"Sets a property in the metadata at key of graph on obj\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.spring_layout-Union{Tuple{InfrastructureGraph{T}}, Tuple{T}} where T<:LightGraphs.AbstractGraph","page":"Functions","title":"PowerModelsAnalytics.spring_layout","text":"NetworkX spring layout function\n\n\n\n\n\n","category":"method"},{"location":"library/#PowerModelsAnalytics.vertices-Union{Tuple{InfrastructureGraph{T}}, Tuple{T}} where T<:LightGraphs.AbstractGraph","page":"Functions","title":"PowerModelsAnalytics.vertices","text":"Returns an iterator of all of the nodes/vertices in graph\n\n\n\n\n\n","category":"method"},{"location":"developer/#Developer-Documentation","page":"Developer","title":"Developer Documentation","text":"","category":"section"},{"location":"#PowerModelsAnalytics.jl-Documentation","page":"Home","title":"PowerModelsAnalytics.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PowerModelsAnalytics","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PowerModelsAnalytics.jl is a Julia/JuMP extension package to PowerModels.jl for modeling of Multi-Phase (with a focus on three-phase) power grids.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The latest stable release of PowerModels can be installed using the Julia package manager with","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.add(\"PowerModelsAnalytics\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the current development version, \"checkout\" this package with","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.checkout(\"PowerModelsAnalytics\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Test that the package works by running","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.test(\"PowerModelsAnalytics\")","category":"page"}]
}
